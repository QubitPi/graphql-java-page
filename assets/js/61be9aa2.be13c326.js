"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5196],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,y=c["".concat(l,".").concat(g)]||c[g]||m[g]||i;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2573:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var r=n(8168),a=n(8587),i=(n(6540),n(5680)),o=["components"],s={title:"Limits",date:new Date("2024-11-24T00:00:00.000Z"),description:"Configuring limits to prevent DoS attacks"},l="Limits in graphql-java to Prevent DoS Attacks",p={unversionedId:"limits",id:"limits",isDocsHomePage:!1,title:"Limits",description:"Configuring limits to prevent DoS attacks",source:"@site/documentation/limits.md",sourceDirName:".",slug:"/limits",permalink:"/documentation/master/limits",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/documentation/limits.md",tags:[],version:"current",frontMatter:{title:"Limits",date:"2024-11-24T00:00:00.000Z",description:"Configuring limits to prevent DoS attacks"},sidebar:"tutorialSidebar",previous:{title:"Instrumentation",permalink:"/documentation/master/instrumentation"},next:{title:"Profiling requests",permalink:"/documentation/master/profiler"}},u=[{value:"Parser Level Limits",id:"parser-level-limits",children:[],level:2},{value:"Introspection Query Limits",id:"introspection-query-limits",children:[],level:2},{value:"Instrumentation",id:"instrumentation",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,a.A)(e,o);return(0,i.yg)("wrapper",(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"limits-in-graphql-java-to-prevent-dos-attacks"},"Limits in graphql-java to Prevent DoS Attacks"),(0,i.yg)("p",null,"graphql-java provides configurable options to limit the potential for Denial of Service (DoS) attacks through excessive query complexity or size. Defaults for all these limits have been already set."),(0,i.yg)("h2",{id:"parser-level-limits"},"Parser Level Limits"),(0,i.yg)("p",null,"At the parser level, graphql-java offers several options to restrict the amount of work the query parser will perform. See ",(0,i.yg)("inlineCode",{parentName:"p"},"graphql.parser.ParserOptions"),"."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Maximum Query Characters:")," Limits the number of characters in a query to prevent excessive parsing time and memory usage. The default is set to 1MB."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public static final int MAX_QUERY_CHARACTERS = 1024 * 1024; // 1 MB\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Maximum Query Tokens:")," Restricts the number of tokens in a query to prevent excessive CPU usage. The default is set to 15,000 tokens."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public static final int MAX_QUERY_TOKENS = 15_000;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Maximum Whitespace Tokens:")," Limits the amount of whitespace in a query to prevent unnecessary parsing overhead. The default is set to 200,000 whitespace tokens."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public static final int MAX_WHITESPACE_TOKENS = 200_000;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Maximum Rule Depth:")," Restricts the depth of grammar rules in a query to prevent stack overflow exceptions. The default is set to 500."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public static final int MAX_RULE_DEPTH = 500;\n")),(0,i.yg)("h2",{id:"introspection-query-limits"},"Introspection Query Limits"),(0,i.yg)("p",null,"graphql-java includes measures to limit introspection queries:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"GoodFaithIntrospection:")," Ensures introspection queries remain under a reasonable size."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-java"},"public static final int GOOD_FAITH_MAX_FIELDS_COUNT = 500;\npublic static final int GOOD_FAITH_MAX_DEPTH_COUNT = 20;\n")),(0,i.yg)("h2",{id:"instrumentation"},"Instrumentation"),(0,i.yg)("p",null,"Beyond parser level limits, graphql-java provides instrumentation to manage query complexity:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"MaxQueryComplexityInstrumentation:")," Limits the complexity of a query to prevent excessive resource usage. ",(0,i.yg)("a",{parentName:"p",href:"/documentation/master/instrumentation#query-complexity-instrumentation"},"See example on the Instrumentation page"),"."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"MaxQueryDepthInstrumentation:")," Limits the depth of a query to prevent overly complex queries. ",(0,i.yg)("a",{parentName:"p",href:"/documentation/master/instrumentation#query-depth-instrumentation"},"See example on the Instrumentation page")))}c.isMDXComponent=!0}}]);