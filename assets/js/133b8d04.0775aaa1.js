"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9328],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>h});var a=t(6540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),l=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=l(e.components);return a.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),h=n,f=u["".concat(s,".").concat(h)]||u[h]||m[h]||o;return t?a.createElement(f,i(i({ref:r},c),{},{components:t})):a.createElement(f,i({ref:r},c))}));function h(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var s in r)hasOwnProperty.call(r,s)&&(p[s]=r[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5720:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>p,metadata:()=>l,toc:()=>m});var a=t(8168),n=t(8587),o=(t(6540),t(5680)),i=["components"],p={title:"Automated performance testing for GraphQL Java",authors:"andi",slug:"performance"},s=void 0,l={permalink:"/blog/performance",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/blog/blog/2024-12-06-performance-testing.md",source:"@site/blog/2024-12-06-performance-testing.md",title:"Automated performance testing for GraphQL Java",description:"GraphQL Java has become a mature and widely adopted library over the past 9.5 years.",date:"2024-12-06T00:00:00.000Z",formattedDate:"December 6, 2024",tags:[],readingTime:1.255,truncated:!1,authors:[{name:"Andreas Marek",title:"Maintainer of GraphQL Java",url:"https://github.com/andimarek",imageURL:"https://github.com/andimarek.png",key:"andi"}],prevItem:{title:"GraphQL Java is a CVE Numbering Authority",permalink:"/blog/cna"},nextItem:{title:"Version 22 released",permalink:"/blog/v22-released"}},c={authorsImageUrls:[void 0]},m=[],u={toc:m};function h(e){var r=e.components,t=(0,n.A)(e,i);return(0,o.yg)("wrapper",(0,a.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"GraphQL Java has become a mature and widely adopted library over the past 9.5 years.\nAnd while we continue to maintain, improve and add features, we don't expect revolutionary changes to the core of the library."),(0,o.yg)("p",null,"As side effect of this maturity it became clear over the least years, that performance is a key aspect that users are interested in.\nEspecially in larger scale applications performance can have a huge impact on operational costs and user experience."),(0,o.yg)("p",null,"In GraphQL Java we leverage ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/openjdk/jmh"},"JMH aka Java Microbenchmark Harness")," to  measure and compare different performance aspects."),(0,o.yg)("p",null,"Historically, performance testing was done manually by running JMH benchmarks on a local machine."),(0,o.yg)("p",null,"This comes with the obvious flaw that it's not reproducible over time and across different machines. A benchmark run on one developer's machine is not\ncomparable to a run on another developer's machine (or often even the same machine months later)."),(0,o.yg)("p",null,"We are very happy to share that we have now an automated performance testing setup in place to overcome these limitations by running\nthe benchmarks in an isolated cloud environment."),(0,o.yg)("p",null,"Currently, it runs on every commit to the ",(0,o.yg)("inlineCode",{parentName:"p"},"master")," branch and the results are stored in the",(0,o.yg)("br",{parentName:"p"}),"\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/tree/master/performance-results"},"performance results folder"),".\nYou can visualize and compare results with the ",(0,o.yg)("a",{parentName:"p",href:"https://jmh.morethan.io/"},"JMH Visualizer tool"),", a free tool which runs in the browser.\nOur goal is to provide clear and reproducible performance improvements over time while preventing any regressions."),(0,o.yg)("p",null,"This work is sponsored and made possible by ",(0,o.yg)("a",{parentName:"p",href:"https://www.atlassian.com/"},"Atlassian")," and we are very grateful for their support."))}h.isMDXComponent=!0}}]);