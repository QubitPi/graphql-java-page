"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1870],{3905:function(n,e,t){t.d(e,{Zo:function(){return m},kt:function(){return c}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var u=a.createContext({}),s=function(n){var e=a.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},m=function(n){var e=s(n.components);return a.createElement(u.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,u=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),d=s(t),c=r,h=d["".concat(u,".").concat(c)]||d[c]||p[c]||i;return t?a.createElement(h,o(o({ref:e},m),{},{components:t})):a.createElement(h,o({ref:e},m))}));function c(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l.mdxType="string"==typeof n?n:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3971:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Instrumentation",date:new Date("2018-09-09T02:52:46.000Z"),description:"Instrumentation allows you to inject code that can observe the execution of a query and also change the runtime behaviours"},u="Instrumentation",s={unversionedId:"instrumentation",id:"version-v19/instrumentation",isDocsHomePage:!1,title:"Instrumentation",description:"Instrumentation allows you to inject code that can observe the execution of a query and also change the runtime behaviours",source:"@site/versioned_docs/version-v19/instrumentation.md",sourceDirName:".",slug:"/instrumentation",permalink:"/graphql-java-page/documentation/v19/instrumentation",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/versioned_docs/version-v19/instrumentation.md",tags:[],version:"v19",frontMatter:{title:"Instrumentation",date:"2018-09-09T02:52:46.000Z",description:"Instrumentation allows you to inject code that can observe the execution of a query and also change the runtime behaviours"},sidebar:"version-v19/tutorialSidebar",previous:{title:"Field visibility",permalink:"/graphql-java-page/documentation/v19/field-visibility"},next:{title:"Logging",permalink:"/graphql-java-page/documentation/v19/logging"}},m=[{value:"Custom Instrumentation",id:"custom-instrumentation",children:[],level:2},{value:"Chaining Instrumentation",id:"chaining-instrumentation",children:[],level:2},{value:"Apollo Tracing Instrumentation",id:"apollo-tracing-instrumentation",children:[],level:2},{value:"Field Validation Instrumentation",id:"field-validation-instrumentation",children:[],level:2},{value:"Query Complexity Instrumentation",id:"query-complexity-instrumentation",children:[],level:2},{value:"Query Depth Instrumentation",id:"query-depth-instrumentation",children:[],level:2}],p={toc:m};function d(n){var e=n.components,t=(0,r.Z)(n,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"instrumentation"},"Instrumentation"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql.execution.instrumentation.Instrumentation")," interface allows you to inject code that can observe the\nexecution of a query and also change the runtime behaviour."),(0,i.kt)("p",null,"The primary use case for this is to allow say performance monitoring and custom logging but it could be used for many different purposes."),(0,i.kt)("p",null,"When you build the ",(0,i.kt)("inlineCode",{parentName:"p"},"Graphql")," object you can specify what ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," to use (if any)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"GraphQL.newGraphQL(schema)\n       .instrumentation(new TracingInstrumentation())\n       .build();\n")),(0,i.kt)("h2",{id:"custom-instrumentation"},"Custom Instrumentation"),(0,i.kt)("p",null,"An implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation"),' needs to implement the "begin" step methods that represent the execution of a graphql query.'),(0,i.kt)("p",null,"Each step must give back a non null ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql.execution.instrumentation.InstrumentationContext")," object which will be called back\nwhen the step completes, and will be told that it succeeded or failed with a Throwable."),(0,i.kt)("p",null,"The following is a basic custom ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," that measures overall execution time and puts it into a stateful object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class CustomInstrumentationState implements InstrumentationState {\n    private Map<String, Object> anyStateYouLike = new HashMap<>();\n\n    void recordTiming(String key, long time) {\n        anyStateYouLike.put(key, time);\n    }\n}\n\nclass CustomInstrumentation extends SimpleInstrumentation {\n    @Override\n    public InstrumentationState createState() {\n        //\n        // instrumentation state is passed during each invocation of an Instrumentation method\n        // and allows you to put stateful data away and reference it during the query execution\n        //\n        return new CustomInstrumentationState();\n    }\n\n    @Override\n    public InstrumentationContext<ExecutionResult> beginExecution(InstrumentationExecutionParameters parameters) {\n        long startNanos = System.nanoTime();\n        return new SimpleInstrumentationContext<ExecutionResult>() {\n            @Override\n            public void onCompleted(ExecutionResult result, Throwable t) {\n                CustomInstrumentationState state = parameters.getInstrumentationState();\n                state.recordTiming(parameters.getQuery(), System.nanoTime() - startNanos);\n            }\n        };\n    }\n\n    @Override\n    public DataFetcher<?> instrumentDataFetcher(DataFetcher<?> dataFetcher, InstrumentationFieldFetchParameters parameters) {\n        //\n        // this allows you to intercept the data fetcher used to fetch a field and provide another one, perhaps\n        // that enforces certain behaviours or has certain side effects on the data\n        //\n        return dataFetcher;\n    }\n\n    @Override\n    public CompletableFuture<ExecutionResult> instrumentExecutionResult(ExecutionResult executionResult, InstrumentationExecutionParameters parameters) {\n        //\n        // this allows you to instrument the execution result some how.  For example the Tracing support uses this to put\n        // the `extensions` map of data in place\n        //\n        return CompletableFuture.completedFuture(executionResult);\n    }\n}\n")),(0,i.kt)("h2",{id:"chaining-instrumentation"},"Chaining Instrumentation"),(0,i.kt)("p",null,"You can combine multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," objects together using the ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql.execution.instrumentation.ChainedInstrumentation")," class which\naccepts a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," objects and calls them in that defined order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<Instrumentation> chainedList = new ArrayList<>();\nchainedList.add(new FooInstrumentation());\nchainedList.add(new BarInstrumentation());\nChainedInstrumentation chainedInstrumentation = new ChainedInstrumentation(chainedList);\n\nGraphQL.newGraphQL(schema)\n        .instrumentation(chainedInstrumentation)\n        .build();\n")),(0,i.kt)("h2",{id:"apollo-tracing-instrumentation"},"Apollo Tracing Instrumentation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphql.execution.instrumentation.tracing.TracingInstrumentation")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," implementation that creates tracing information\nabout the query that is being executed."),(0,i.kt)("p",null,"It follows the Apollo proposed tracing format defined at ",(0,i.kt)("inlineCode",{parentName:"p"},"https://github.com/apollographql/apollo-tracing <https://github.com/apollographql/apollo-tracing>"),"_"),(0,i.kt)("p",null,"A detailed tracing map will be created and placed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"extensions")," section of the result."),(0,i.kt)("p",null,"So given a query like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n")),(0,i.kt)("p",null,"It would return a result like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "hero": {\n      "name": "R2-D2",\n      "friends": [\n        {\n          "name": "Luke Skywalker"\n        },\n        {\n          "name": "Han Solo"\n        },\n        {\n          "name": "Leia Organa"\n        }\n      ]\n    }\n  },\n  "extensions": {\n    "tracing": {\n      "version": 1,\n      "startTime": "2017-08-14T23:13:39.362Z",\n      "endTime": "2017-08-14T23:13:39.497Z",\n      "duration": 135589186,\n      "execution": {\n        "resolvers": [\n          {\n            "path": [\n              "hero"\n            ],\n            "parentType": "Query",\n            "returnType": "Character",\n            "fieldName": "hero",\n            "startOffset": 105697585,\n            "duration": 79111240\n          },\n          {\n            "path": [\n              "hero",\n              "name"\n            ],\n            "parentType": "Droid",\n            "returnType": "String",\n            "fieldName": "name",\n            "startOffset": 125010028,\n            "duration": 20213\n          },\n          {\n            "path": [\n              "hero",\n              "friends"\n            ],\n            "parentType": "Droid",\n            "returnType": "[Character]",\n            "fieldName": "friends",\n            "startOffset": 133352819,\n            "duration": 7927560\n          },\n          {\n            "path": [\n              "hero",\n              "friends",\n              0,\n              "name"\n            ],\n            "parentType": "Human",\n            "returnType": "String",\n            "fieldName": "name",\n            "startOffset": 134105887,\n            "duration": 6783\n          },\n          {\n            "path": [\n              "hero",\n              "friends",\n              1,\n              "name"\n            ],\n            "parentType": "Human",\n            "returnType": "String",\n            "fieldName": "name",\n            "startOffset": 134725922,\n            "duration": 7016\n          },\n          {\n            "path": [\n              "hero",\n              "friends",\n              2,\n              "name"\n            ],\n            "parentType": "Human",\n            "returnType": "String",\n            "fieldName": "name",\n            "startOffset": 134875089,\n            "duration": 6342\n          }\n        ]\n      }\n    }\n  }\n}\n\n')),(0,i.kt)("h2",{id:"field-validation-instrumentation"},"Field Validation Instrumentation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphql.execution.instrumentation.fieldvalidation.FieldValidationInstrumentation")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," implementation that\ncan be used to validate fields and their arguments before query execution.  If errors are returned during this process then\nthe query execution is aborted and the errors will be in the query result."),(0,i.kt)("p",null,"You can make you own custom implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"FieldValidation")," or you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleFieldValidation")," class\nto add simple per field checks rules."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'ExecutionPath fieldPath = ExecutionPath.parse("/user");\nFieldValidation fieldValidation = new SimpleFieldValidation()\n        .addRule(fieldPath, new BiFunction<FieldAndArguments, FieldValidationEnvironment, Optional<GraphQLError>>() {\n            @Override\n            public Optional<GraphQLError> apply(FieldAndArguments fieldAndArguments, FieldValidationEnvironment environment) {\n                String nameArg = fieldAndArguments.getFieldArgument("name");\n                if (nameArg.length() > 255) {\n                    return Optional.of(environment.mkError("Invalid user name", fieldAndArguments));\n                }\n                return Optional.empty();\n            }\n        });\n\nFieldValidationInstrumentation instrumentation = new FieldValidationInstrumentation(\n        fieldValidation\n);\n\nGraphQL.newGraphQL(schema)\n       .instrumentation(instrumentation)\n       .build();\n')),(0,i.kt)("h2",{id:"query-complexity-instrumentation"},"Query Complexity Instrumentation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphql.analysis.MaxQueryComplexityInstrumentation")," in an ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," implementation than can be used to abort a query if the total number of data\nfields queried exceeds the defined limit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"GraphQL.newGraphQL(schema)\n        .instrumentation(new MaxQueryComplexityInstrumentation(10))\n        .build();\n")),(0,i.kt)("p",null,"With a query like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  hero {\n    name\n    friends {\n      name\n      homeWorld {\n        name\n        climate\n      }\n      species {\n        name\n      }\n    }\n    homeWorld {\n      name\n      climate\n    }\n  }\n}\n")),(0,i.kt)("p",null,"Would return a result like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": [\n    {\n      "message": "maximum query complexity exceeded 12 > 10",\n      "extensions": {\n        "classification": "ExecutionAborted"\n      }\n    }\n  ]\n}\n')),(0,i.kt)("h2",{id:"query-depth-instrumentation"},"Query Depth Instrumentation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphql.analysis.MaxQueryDepthInstrumentation")," in an ",(0,i.kt)("inlineCode",{parentName:"p"},"Instrumentation")," implementation than can be used to abort a query if the total depth of\nthe query exceeds the defined limit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"GraphQL.newGraphQL(schema)\n        .instrumentation(new MaxQueryDepthInstrumentation(4))\n        .build();\n")),(0,i.kt)("p",null,"With a query like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"    query {\n      hero {\n        name\n        friends {\n          name\n          friends {\n            name\n            friends {\n              name\n            }\n          }\n        }\n      }\n    }\n")),(0,i.kt)("p",null,"Would return a result like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": [\n    {\n      "message": "maximum query depth exceeded 4 > 3",\n      "extensions": {\n        "classification": "ExecutionAborted"\n      }\n    }\n  ]\n}\n')))}d.isMDXComponent=!0}}]);