"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9135],{5680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>h});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(a),h=r,g=u["".concat(p,".").concat(h)]||u[h]||c[h]||o;return a?t.createElement(g,l(l({ref:n},d),{},{components:a})):t.createElement(g,l({ref:n},d))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9131:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=a(8168),r=a(8587),o=(a(6540),a(5680)),l=["components"],i={title:"GraphQL Java and Threads",authors:"andi",slug:"threads"},p="GraphQL Java and Threads",s={permalink:"/blog/threads",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/blog/blog/2021-02-05-threads.md",source:"@site/blog/2021-02-05-threads.md",title:"GraphQL Java and Threads",description:"We follow a fundamental rule in GraphQL Java regarding Threads: GraphQL Java never creates",date:"2021-02-05T00:00:00.000Z",formattedDate:"February 5, 2021",tags:[],readingTime:3.565,truncated:!1,authors:[{name:"Andreas Marek",title:"Maintainer of GraphQL Java",url:"https://github.com/andimarek",imageURL:"https://github.com/andimarek.png",key:"andi"}],prevItem:{title:"GraphQL spec releases are not important",permalink:"/blog/spec-releases-are-not-important"},nextItem:{title:"Building efficient data fetchers by looking ahead",permalink:"/blog/deep-dive-data-fetcher-results"}},d={authorsImageUrls:[void 0]},c=[],u={toc:c};function h(e){var n=e.components,a=(0,r.A)(e,l);return(0,o.yg)("wrapper",(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"We follow a fundamental rule in GraphQL Java regarding Threads: GraphQL Java never creates\nThreads or interacts with Thread pools. We do this because we want to give the user the full control\nand whatever GraphQL Java would do, it would not be correct for every use case."),(0,o.yg)("p",null,"Additionally to being strictly unopinionated regarding Threads, GraphQL Java is also fully reactive,\nimplemented via ",(0,o.yg)("inlineCode",{parentName:"p"},"CompletableFuture")," (",(0,o.yg)("inlineCode",{parentName:"p"},"CF"),").\nThese two constrain together mean we rely on the ",(0,o.yg)("inlineCode",{parentName:"p"},"CF")," returned by the user.\nSpecifically we piggyback on the ",(0,o.yg)("inlineCode",{parentName:"p"},"CF")," returned by the ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher"),"\n(or other async methods which can be implemented by the user, but we focus here on ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher"),"\nas it is by far the most important)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"// Pseudo code in GraphQL Java\n\nCompletableFuture<Object> dataFetcherResult = invokeDataFetcher();\ndataFetcherResult.thenApply(result -> {\n    // in which Thread  where this code happens is controlled by the CF returned\n    continueExecutingQuery(result);\n});\n")),(0,o.yg)("h1",{id:"blocking-datafetcher"},"Blocking DataFetcher"),(0,o.yg)("p",null,"Lets assume you are accessing a DB in a blocking way in your ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"String get(DataFetchingEnvironment env) {\n    return getValueFromDb(env); // blocking the Thread until the value is read from DB\n};\n")),(0,o.yg)("p",null,"This is not completely wrong, but not recommend in general as the consequence of this kind of ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFecher"),"\nis that GraphQL can't execute the query in the most efficient way."),(0,o.yg)("p",null,"For example for the following query:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-graphql"},"{\n  dbData1\n  dbData2\n  dbData3\n}\n")),(0,o.yg)("p",null,"If the ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," for these ",(0,o.yg)("inlineCode",{parentName:"p"},"dbData")," fields don't return a ",(0,o.yg)("inlineCode",{parentName:"p"},"CF"),",\nbut block the Thread until the data is read, GraphQL Java will not work with maximum efficiency."),(0,o.yg)("p",null,"GraphQL Java can invoke the ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," for all three fields in parallel. But if your ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," for\n",(0,o.yg)("inlineCode",{parentName:"p"},"dbData1")," is blocking, GraphQL Java will also be blocked and only invoke the next ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," once ",(0,o.yg)("inlineCode",{parentName:"p"},"dbData<n>"),"\nis finished.\nThe recommend solution to this problem is offloading your blocking code onto a separate Thread pool\nas shown here:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"CompletableFuture<String> get(DataFetchingEnvironment env) {\n    return CompletableFuture.supplyAsync( getValueFromDb(env), dbThreadPool );\n};\n")),(0,o.yg)("p",null,"This code will maximize the performance and will cause all three fields to be fetched in parallel."),(0,o.yg)("h1",{id:"different-pools-for-different-work"},"Different pools for different work"),(0,o.yg)("p",null,"The subsequent work done by GraphQL Java will be executed in the same ",(0,o.yg)("inlineCode",{parentName:"p"},"dbThreadPool")," until it\nencounters a new ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," returned by the user code and this new ",(0,o.yg)("inlineCode",{parentName:"p"},"CF")," dedicates the Thread\nfor the subsequent work."),(0,o.yg)("p",null,"If you want to have separate pools for different kind of work, one for the actual ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," which normally\ninvolve IO and one of the actual GraphQL Java work (which is pure CPU), you need to switch back from your offloaded\npool to a dedicated GraphQL Java pool before returning the ",(0,o.yg)("inlineCode",{parentName:"p"},"CF"),". You can achieve this with code like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"CompletableFuture<String> get(DataFetchingEnvironment env) {\n    return CompletableFuture.supplyAsync( getValueFromDb(env), dbThreadPool )\n        .handleAsync((result,exception) -> {\n            if(exception !=null) throw exception;\n            return result;\n        }, graphqlJavaPool);\n};\n")),(0,o.yg)("p",null,"Notice the ",(0,o.yg)("inlineCode",{parentName:"p"},".handleAsync")," which doesn't do anything except forwarding the result, but on a\ndifferent pool (",(0,o.yg)("inlineCode",{parentName:"p"},"graphqlJavaPool"),")."),(0,o.yg)("p",null,"This way you have different pools for different kind of work (one for CPU bound GraphQL Java work and one\nfor multiple ones for IO bound work), which can be configured and monitored independently."),(0,o.yg)("h1",{id:"in-a-fully-reactive-system"},"In a fully reactive system"),(0,o.yg)("p",null,"If your system is fully reactive your ",(0,o.yg)("inlineCode",{parentName:"p"},"DataFetcher")," will more look like this"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},"CompletableFuture<String> get(DataFetchingEnvironment env) {\n    return callAnotherServiceNonBlocking(env); // returns CompletableFuture\n};\n")),(0,o.yg)("p",null,"The code above could be implemented via ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/AsyncHttpClient/async-http-client"},"Async Http Client"),"\nor ",(0,o.yg)("a",{parentName:"p",href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-client"},"WebFlux WebClient"),".\nBoth provide fully reactive HTTP clients."),(0,o.yg)("p",null,"Because the code is non blocking there is no need to offload anything on a dedicated Thread pool to avoid blocking\nGraphQL Java."),(0,o.yg)("p",null,"You still might want to consider using a dedicated GraphQL Java pool as you otherwise would use\nThreads which are dedicated to IO. How much this is really relevant depends highly on your use case."),(0,o.yg)("p",null,"For example ",(0,o.yg)("inlineCode",{parentName:"p"},"Async Http Client")," (",(0,o.yg)("inlineCode",{parentName:"p"},"AHC"),") uses by default 2 * #cores (this value comes actually from Netty) Threads. If you\ndon't use a dedicated Thread Pool for GraphQL Java you might encounter situations under load where all ",(0,o.yg)("inlineCode",{parentName:"p"},"AHC"),"\nThreads are either busy or blocked by GraphQL Java code and as a result your system is not as performant as it\ncould be. Normally only load tests in production like environments can show the relevance of different Thread pools."),(0,o.yg)("h1",{id:"feedback-or-questions"},"Feedback or questions"),(0,o.yg)("p",null,"We use ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/discussions"},"GitHub Discussions")," for general feedback and questions."))}h.isMDXComponent=!0}}]);