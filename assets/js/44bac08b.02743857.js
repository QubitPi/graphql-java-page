"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6914],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2670:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"Field selection",date:new Date("2018-09-09T02:52:46.000Z"),description:"How you can efficiently look ahead at the selected fields lower in the query"},s="Field Selection",c={unversionedId:"field-selection",id:"version-v21/field-selection",isDocsHomePage:!1,title:"Field selection",description:"How you can efficiently look ahead at the selected fields lower in the query",source:"@site/versioned_docs/version-v21/field-selection.md",sourceDirName:".",slug:"/field-selection",permalink:"/graphql-java-page/documentation/v21/field-selection",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/versioned_docs/version-v21/field-selection.md",tags:[],version:"v21",frontMatter:{title:"Field selection",date:"2018-09-09T02:52:46.000Z",description:"How you can efficiently look ahead at the selected fields lower in the query"},sidebar:"version-v21/tutorialSidebar",previous:{title:"Execution",permalink:"/graphql-java-page/documentation/v21/execution"},next:{title:"Field visibility",permalink:"/graphql-java-page/documentation/v21/field-visibility"}},d=[],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"field-selection"},"Field Selection"),(0,r.kt)("p",null,"Field selection occurs when you have a compound type (an object or interface type) and you select a set of sub fields\nfrom that type."),(0,r.kt)("p",null,"For example given the following query :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'query {\n  user(userId : "xyz") {\n    name\n    age\n    weight\n    friends {\n      name\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The field selection set of the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," field is ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"weight"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"friends")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"friends/name")),(0,r.kt)("p",null,"Knowing the field selection set can help make ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFetcher"),"s more efficient.  For example in the above query\nimagine that the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," field is backed by an SQL database system.  The data fetcher could look ahead into the field selection\nset and use different queries because it knows the caller wants friend information as well as user information."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"graphql.schema.DataFetchingFieldSelectionSet")," is used to represent this field selection set.  It gives you maps\nof the fields and their ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.schema.GraphQLFieldDefinition"),"s and argument values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'DataFetcher smartUserDF = new DataFetcher() {\n    @Override\n    public Object get(DataFetchingEnvironment env) {\n        String userId = env.getArgument("userId");\n\n        DataFetchingFieldSelectionSet selectionSet = env.getSelectionSet();\n        if (selectionSet.contains("friends/*")) {\n            return getUserAndTheirFriends(userId);\n        } else {\n            return getUser(userId);\n        }\n    }\n};\n')),(0,r.kt)("p",null,"A glob path matching system is used for addressing fields in the selection.  Its based on ",(0,r.kt)("inlineCode",{parentName:"p"},"java.nio.file.FileSystem#getPathMatcher"),"\nas an implementation."),(0,r.kt)("p",null,"This will allow you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," as special matching characters such that ",(0,r.kt)("inlineCode",{parentName:"p"},"invoice/customer*")," would\nmatch an ",(0,r.kt)("inlineCode",{parentName:"p"},"invoice")," field with child fields that start with ",(0,r.kt)("inlineCode",{parentName:"p"},"customer"),".  Each level of field is separated by ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," just like\na file system path."),(0,r.kt)("p",null,"There are methods that allow you to get more detailed information about the fields in the selection set.  For example\nif you are using ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/relay/"},"Relay")," often you want to know what fields have been request in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Connection")," section of the query."),(0,r.kt)("p",null,"So given a query like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  users(first:10)  {\n    edges {\n      node {\n        name\n        age\n        weight\n        friends {\n          name\n        }\n      }\n    }\n  }\n}\n")),(0,r.kt)("p",null,"you can write code that gets the details of each specific field that matches a glob."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'DataFetchingFieldSelectionSet selectionSet = env.getSelectionSet();\nList<SelectedField> nodeFields = selectionSet.getFields("edges/nodes/*");\nnodeFields.forEach(selectedField -> {\n    System.out.println(selectedField.getName());\n    System.out.println(selectedField.getFieldDefinition().getType());\n\n    DataFetchingFieldSelectionSet innerSelectionSet = selectedField.getSelectionSet();\n    // this forms a tree of selection and you can get very fancy with it\n}\n')))}u.isMDXComponent=!0}}]);