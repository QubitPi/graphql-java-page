"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8909],{5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),g=u(n),d=a,h=g["".concat(l,".").concat(d)]||g[d]||c[d]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8098:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>g,frontMatter:()=>p,metadata:()=>u,toc:()=>s});var r=n(8168),a=n(8587),o=(n(6540),n(5680)),i=["components"],p={title:"Upgrade notes",date:new Date("2024-12-28T02:52:46.000Z"),description:"Miscellaneous notes to assist with upgrading GraphQL Java versions"},l="Upgrade notes",u={unversionedId:"upgrade-notes",id:"version-v24/upgrade-notes",isDocsHomePage:!1,title:"Upgrade notes",description:"Miscellaneous notes to assist with upgrading GraphQL Java versions",source:"@site/versioned_docs/version-v24/upgrade-notes.md",sourceDirName:".",slug:"/upgrade-notes",permalink:"/documentation/upgrade-notes",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/versioned_docs/version-v24/upgrade-notes.md",tags:[],version:"v24",frontMatter:{title:"Upgrade notes",date:"2024-12-28T02:52:46.000Z",description:"Miscellaneous notes to assist with upgrading GraphQL Java versions"},sidebar:"version-v24/tutorialSidebar",previous:{title:"Subscriptions",permalink:"/documentation/subscriptions"}},s=[{value:"Stricter requirements for scalar parseValue coercion in Version 22.0",id:"stricter-requirements-for-scalar-parsevalue-coercion-in-version-220",children:[{value:"What changed?",id:"what-changed",children:[],level:3},{value:"How do I upgrade?",id:"how-do-i-upgrade",children:[],level:3},{value:"How to use the InputInterceptor to monitor traffic",id:"how-to-use-the-inputinterceptor-to-monitor-traffic",children:[],level:3},{value:"How to use the InputInterceptor to use the legacy parseValue behaviour (prior to v22.0)",id:"how-to-use-the-inputinterceptor-to-use-the-legacy-parsevalue-behaviour-prior-to-v220",children:[],level:3}],level:2}],c={toc:s};function g(e){var t=e.components,n=(0,a.A)(e,i);return(0,o.yg)("wrapper",(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"upgrade-notes"},"Upgrade notes"),(0,o.yg)("p",null,"This is a special page with extra information to help with upgrading to a newer version of GraphQL Java, based on feedback from GitHub Discussion threads."),(0,o.yg)("p",null,"See detailed ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/releases"},"release notes on GitHub"),"."),(0,o.yg)("h2",{id:"stricter-requirements-for-scalar-parsevalue-coercion-in-version-220"},"Stricter requirements for scalar parseValue coercion in Version 22.0"),(0,o.yg)("h3",{id:"what-changed"},"What changed?"),(0,o.yg)("p",null,"In v22.0, ",(0,o.yg)("inlineCode",{parentName:"p"},"parseValue")," coercion was made stricter to align with the reference JS implementation. This change applied to String, Boolean, Float, and Int."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"String ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue")," now requires input of type String. For example, a Number input 123 or a Boolean input true will no longer be accepted."),(0,o.yg)("li",{parentName:"ul"},"Boolean ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue"),' now requires input of type Boolean. For example, a String input "true" will no longer be accepted.'),(0,o.yg)("li",{parentName:"ul"},"Float ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue"),' now requires input of type Number. For example, a String input "3.14" will no longer be accepted.'),(0,o.yg)("li",{parentName:"ul"},"Int ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue"),' now requires input of type Number. For example, a String input "42" will no longer be accepted.')),(0,o.yg)("p",null,"If you are upgrading from an earlier version of GraphQL Java and you see an error message such as ",(0,o.yg)("inlineCode",{parentName:"p"},"Expected a value that can be converted to type 'Int' but it was a 'String'"),", it's because of this change in ",(0,o.yg)("inlineCode",{parentName:"p"},"parseValue")," behavior for scalars."),(0,o.yg)("p",null,"See the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/releases/tag/v22.0"},"v22.0 release notes")," on GitHub."),(0,o.yg)("h3",{id:"how-do-i-upgrade"},"How do I upgrade?"),(0,o.yg)("p",null,"As called out in the release notes, this is a breaking change."),(0,o.yg)("p",null,"You have two options:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Migrate: Use ",(0,o.yg)("inlineCode",{parentName:"li"},"InputInterceptor")," introduced in ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/graphql-java/graphql-java/releases/tag/v21.0"},"version 21.0")," to monitor incoming traffic, and after a period of time, migrate to the stricter ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue")," coercion in version 22.0"),(0,o.yg)("li",{parentName:"ol"},"Revert to legacy behavior: Use ",(0,o.yg)("inlineCode",{parentName:"li"},"InputInterceptor")," to permanently use the older, less strict ",(0,o.yg)("inlineCode",{parentName:"li"},"parseValue")," coercion, and keep things as they were before version 22.0")),(0,o.yg)("p",null,"We'll leave the choice up to you. Here's how to implement each option."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"InputInterceptor")," interface allows you to monitor and/or modify input values, and an implementation is provided in ",(0,o.yg)("inlineCode",{parentName:"p"},"LegacyCoercingInputInterceptor"),"."),(0,o.yg)("h3",{id:"how-to-use-the-inputinterceptor-to-monitor-traffic"},"How to use the InputInterceptor to monitor traffic"),(0,o.yg)("p",null,"You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"LegacyCoercingInputInterceptor")," implementation to monitor traffic. You can use the method ",(0,o.yg)("inlineCode",{parentName:"p"},"observeValues")," to monitor incoming requests. When a legacy value is detected, a callback will be invoked. For example, the callback could be emitting a metric. To enable this observer, add it to ",(0,o.yg)("inlineCode",{parentName:"p"},"GraphQLContext"),", for example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},'InputInterceptor legacyInputInterceptor = LegacyCoercingInputInterceptor.observesValues((inputValue, graphQLInputType) -> {\n    emitAMetric(inputValue, graphQLInputType);\n});\n\nExecutionInput executionInput = ExecutionInput.newExecutionInput()\n        .query("query { exampleField }")\n        .graphQLContext(Map.of(InputInterceptor.class, legacyInputInterceptor))\n        .build();\n')),(0,o.yg)("h3",{id:"how-to-use-the-inputinterceptor-to-use-the-legacy-parsevalue-behaviour-prior-to-v220"},"How to use the InputInterceptor to use the legacy parseValue behaviour (prior to v22.0)"),(0,o.yg)("p",null,"You can alternatively use the ",(0,o.yg)("inlineCode",{parentName:"p"},"LegacyCoercingInputInterceptor")," to revert to the legacy ",(0,o.yg)("inlineCode",{parentName:"p"},"parseValue")," behavior, as it was prior to v22.0. The legacy behavior is implemented in the ",(0,o.yg)("inlineCode",{parentName:"p"},"migratesValues")," method. To enable legacy behavior, add it to ",(0,o.yg)("inlineCode",{parentName:"p"},"GraphQLContext"),", for example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java"},'ExecutionInput executionInput = ExecutionInput.newExecutionInput()\n        .query("query { exampleField }")\n        .graphQLContext(Map.of(InputInterceptor.class, LegacyCoercingInputInterceptor.migratesValues()))\n        .build();\n')))}g.isMDXComponent=!0}}]);