"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3175],{5680:(e,i,n)=>{n.d(i,{xA:()=>d,yg:()=>y});var t=n(6540);function r(e,i,n){return i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,e}function a(e,i){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?a(Object(n),!0).forEach((function(i){r(e,i,n[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))}))}return e}function o(e,i){if(null==e)return{};var n,t,r=function(e,i){if(null==e)return{};var n,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],i.indexOf(n)>=0||(r[n]=e[n]);return r}(e,i);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],i.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var i=t.useContext(s),n=i;return e&&(n="function"==typeof e?e(i):l(l({},i),e)),n},d=function(e){var i=c(e.components);return t.createElement(s.Provider,{value:i},e.children)},p={inlineCode:"code",wrapper:function(e){var i=e.children;return t.createElement(t.Fragment,{},i)}},u=t.forwardRef((function(e,i){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),y=r,m=u["".concat(s,".").concat(y)]||u[y]||p[y]||a;return n?t.createElement(m,l(l({ref:i},d),{},{components:n})):t.createElement(m,l({ref:i},d))}));function y(e,i){var n=arguments,r=i&&i.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var o={};for(var s in i)hasOwnProperty.call(i,s)&&(o[s]=i[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5848:(e,i,n)=>{n.r(i),n.d(i,{contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var t=n(8168),r=n(8587),a=(n(6540),n(5680)),l=["components"],o={title:"Field visibility",date:new Date("2019-02-12T02:00:00.000Z"),description:"How control the visibility of the fields defined in a schema"},s="Limiting Field Visibility",c={unversionedId:"field-visibility",id:"version-v23/field-visibility",isDocsHomePage:!1,title:"Field visibility",description:"How control the visibility of the fields defined in a schema",source:"@site/versioned_docs/version-v23/field-visibility.md",sourceDirName:".",slug:"/field-visibility",permalink:"/documentation/field-visibility",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/versioned_docs/version-v23/field-visibility.md",tags:[],version:"v23",frontMatter:{title:"Field visibility",date:"2019-02-12T02:00:00.000Z",description:"How control the visibility of the fields defined in a schema"},sidebar:"version-v23/tutorialSidebar",previous:{title:"Field selection",permalink:"/documentation/field-selection"},next:{title:"Instrumentation",permalink:"/documentation/instrumentation"}},d=[],p={toc:d};function u(e){var i=e.components,n=(0,r.A)(e,l);return(0,a.yg)("wrapper",(0,t.A)({},p,n,{components:i,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"limiting-field-visibility"},"Limiting Field Visibility"),(0,a.yg)("p",null,"By default every field defined in a ",(0,a.yg)("inlineCode",{parentName:"p"},"GraphqlSchema")," is available.  There are cases where you may want to restrict certain fields\ndepending on the user."),(0,a.yg)("p",null,"You can do this by using a ",(0,a.yg)("inlineCode",{parentName:"p"},"graphql.schema.visibility.GraphqlFieldVisibility")," implementation and attaching it to the schema."),(0,a.yg)("p",null,"A simple ",(0,a.yg)("inlineCode",{parentName:"p"},"graphql.schema.visibility.BlockedFields")," implementation based on fully qualified field name is provided."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'GraphqlFieldVisibility blockedFields = BlockedFields.newBlock()\n        .addPattern("Character.id")\n        .addPattern("Droid.appearsIn")\n        .addPattern(".*\\\\.hero") // it uses regular expressions\n        .build();\nGraphQLCodeRegistry codeRegistry = GraphQLCodeRegistry.newCodeRegistry()\n        .fieldVisibility(blockedFields)\n        .build();\n\nGraphQLSchema schema = GraphQLSchema.newSchema()\n        .query(StarWarsSchema.queryType)\n        .codeRegistry(codeRegistry)\n        .build();\n')),(0,a.yg)("p",null,"There is also another implementation that prevents instrumentation from being able to be performed on your schema, if that is a requirement."),(0,a.yg)("p",null,"Note that this puts your server in contravention of the graphql specification and expectations of most clients so use this with caution."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"GraphQLCodeRegistry codeRegistry = GraphQLCodeRegistry.newCodeRegistry()\n        .fieldVisibility(NoIntrospectionGraphqlFieldVisibility.NO_INTROSPECTION_FIELD_VISIBILITY)\n        .build();\nGraphQLSchema schema = GraphQLSchema.newSchema()\n        .query(StarWarsSchema.queryType)\n        .codeRegistry(codeRegistry)\n        .build();\n")),(0,a.yg)("p",null,"You can create your own derivation of ",(0,a.yg)("inlineCode",{parentName:"p"},"GraphqlFieldVisibility")," to check what ever you need to do to work out what fields\nshould be visible or not."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'class CustomFieldVisibility implements GraphqlFieldVisibility {\n\n    final YourUserAccessService userAccessService;\n\n    CustomFieldVisibility(YourUserAccessService userAccessService) {\n        this.userAccessService = userAccessService;\n    }\n\n    @Override\n    public List<GraphQLFieldDefinition> getFieldDefinitions(GraphQLFieldsContainer fieldsContainer) {\n        if ("AdminType".equals(fieldsContainer.getName())) {\n            if (!userAccessService.isAdminUser()) {\n                return Collections.emptyList();\n            }\n        }\n        return fieldsContainer.getFieldDefinitions();\n    }\n\n    @Override\n    public GraphQLFieldDefinition getFieldDefinition(GraphQLFieldsContainer fieldsContainer, String fieldName) {\n        if ("AdminType".equals(fieldsContainer.getName())) {\n            if (!userAccessService.isAdminUser()) {\n                return null;\n            }\n        }\n        return fieldsContainer.getFieldDefinition(fieldName);\n    }\n}\n')))}u.isMDXComponent=!0}}]);