"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[549],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),h=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=h(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=h(a),c=r,m=d["".concat(p,".").concat(c)]||d[c]||u[c]||o;return a?n.createElement(m,i(i({ref:t},s),{},{components:a})):n.createElement(m,i({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var h=2;h<o;h++)i[h]=a[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1113:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return h},toc:function(){return s}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={title:"Tutorial with Spring for GraphQl",sidebar_position:1,id:"tutorial-getting-started"},p="Getting started with Spring for GraphQL",h={type:"mdx",permalink:"/graphql-java-page/tutorials/getting-started-with-spring-boot",source:"@site/src/pages/tutorials/getting-started-with-spring-boot.md"},s=[{value:"A very short introduction to GraphQL",id:"a-very-short-introduction-to-graphql",children:[],level:2},{value:"GraphQL Java Overview",id:"graphql-java-overview",children:[],level:2},{value:"Our example API: getting book details",id:"our-example-api-getting-book-details",children:[],level:2},{value:"Create a Spring Boot app",id:"create-a-spring-boot-app",children:[],level:2},{value:"Schema",id:"schema",children:[],level:2},{value:"Source of the data",id:"source-of-the-data",children:[{value:"Create the Book class",id:"create-the-book-class",children:[],level:3},{value:"Create the Author class",id:"create-the-author-class",children:[],level:3}],level:2},{value:"Adding code to fetch data",id:"adding-code-to-fetch-data",children:[],level:2},{value:"Running our first query",id:"running-our-first-query",children:[{value:"Enable the GraphiQL Playground",id:"enable-the-graphiql-playground",children:[],level:3},{value:"Boot the application",id:"boot-the-application",children:[],level:3},{value:"Run the query",id:"run-the-query",children:[],level:3}],level:2},{value:"Further reading",id:"further-reading",children:[{value:"Book",id:"book",children:[],level:3},{value:"Sample source code",id:"sample-source-code",children:[],level:3},{value:"Documentation",id:"documentation",children:[],level:3},{value:"More Spring for GraphQL examples",id:"more-spring-for-graphql-examples",children:[],level:3},{value:"Tutorials written by the community",id:"tutorials-written-by-the-community",children:[],level:3},{value:"GitHub Discussions",id:"github-discussions",children:[],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"getting-started-with-spring-for-graphql"},"Getting started with Spring for GraphQL"),(0,o.kt)("p",null,"In this tutorial, you will create a GraphQL server in Java using ",(0,o.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-graphql/reference/"},"Spring for GraphQL")," in 3 minutes. It requires a little Spring and Java knowledge. While we give a brief introduction to GraphQL, the focus of this tutorial is developing a GraphQL server in Java."),(0,o.kt)("p",null,"If you're looking to learn more after this tutorial, we (the maintainers) have written a book! ",(0,o.kt)("a",{parentName:"p",href:"https://leanpub.com/graphql-java"},(0,o.kt)("strong",{parentName:"a"},"GraphQL with Java and Spring"))," includes everything you need to know to build a production ready GraphQL service with Spring for GraphQL, the official Spring integration built on top of the GraphQL Java engine. It's available on ",(0,o.kt)("a",{parentName:"p",href:"https://leanpub.com/graphql-java"},"Leanpub")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.amazon.com/GraphQL-Java-Spring-Andreas-Marek-ebook/dp/B0C96ZYWPF/"},"Amazon"),"."),(0,o.kt)("h2",{id:"a-very-short-introduction-to-graphql"},"A very short introduction to GraphQL"),(0,o.kt)("p",null,"GraphQL is a query language to retrieve data from a server. It is an alternative to REST, SOAP or gRPC."),(0,o.kt)("p",null,"Let's suppose we want to query the details for a specific book from an online store backend."),(0,o.kt)("p",null,'With GraphQL you send the following query to the server to get the details for the book with the id "book-1":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'query bookDetails {\n  bookById(id: "book-1"){\n    id\n    name\n    pageCount\n    author {\n      firstName\n      lastName\n    }\n  }\n}\n')),(0,o.kt)("p",null,"This is not JSON (even though it looks deliberately similar), it is a GraphQL query.\nIt basically says:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"query a book with a specific id"),(0,o.kt)("li",{parentName:"ul"},"get me the id, name, pageCount and author from that book"),(0,o.kt)("li",{parentName:"ul"},"for the author, I want to know the firstName and lastName")),(0,o.kt)("p",null,"The response is normal JSON:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "bookById": {\n    "id":"book-1",\n    "name":"Harry Potter and the Philosopher\'s Stone",\n    "pageCount":223,\n    "author": {\n      "firstName":"Joanne",\n      "lastName":"Rowling"\n    }\n  }\n}\n')),(0,o.kt)("p",null,'One very important property of GraphQL is that it is statically typed: the server knows exactly the shape of every object you can query and any client can actually "introspect" the server and ask for the "schema". The schema describes what queries are possible and what fields you can get back. (Note: when we refer to schema here, we always refer to a "GraphQL Schema", which is not related to other schemas like "JSON Schema" or "Database Schema")'),(0,o.kt)("p",null,"The schema for the above query looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  bookById(id: ID): Book\n}\n\ntype Book {\n  id: ID\n  name: String\n  pageCount: Int\n  author: Author\n}\n\ntype Author {\n  id: ID\n  firstName: String\n  lastName: String\n}\n")),(0,o.kt)("p",null,"This tutorial will focus on how to implement a GraphQL server with this schema in Java."),(0,o.kt)("p",null,"We've barely scratched the surface of what's possible with GraphQL. Further information can be found on the ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/learn/"},"official GraphQL page"),"."),(0,o.kt)("h2",{id:"graphql-java-overview"},"GraphQL Java Overview"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.graphql-java.com"},"GraphQL Java")," is the Java (server) implementation for GraphQL.\nThere are several repositories in the GraphQL Java Github org. The most important one is the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java"},"GraphQL Java Engine")," which is the basis for everything else."),(0,o.kt)("p",null,"The GraphQL Java Engine is only concerned with executing queries. It doesn't deal with any HTTP or JSON related topics. For these aspects, we will use ",(0,o.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-graphql/reference/"},"Spring for GraphQL")," which takes care of exposing our API via Spring Boot over HTTP."),(0,o.kt)("p",null,"The main steps of creating a GraphQL Java server are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Defining a GraphQL Schema."),(0,o.kt)("li",{parentName:"ol"},"Deciding on how the actual data for a query is fetched.")),(0,o.kt)("h2",{id:"our-example-api-getting-book-details"},"Our example API: getting book details"),(0,o.kt)("p",null,"Our example app will be a simple API to get details for a specific book.\nThis is in no way a comprehensive API, but it is enough for this tutorial."),(0,o.kt)("h2",{id:"create-a-spring-boot-app"},"Create a Spring Boot app"),(0,o.kt)("p",null,"The easiest way to create a Spring Boot app is to use the ",(0,o.kt)("a",{parentName:"p",href:"https://start.spring.io/"},"Spring Initializr"),"."),(0,o.kt)("p",null,"Select:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Gradle Project"),(0,o.kt)("li",{parentName:"ul"},"Spring Boot 3"),(0,o.kt)("li",{parentName:"ul"},"Java 17 or higher")),(0,o.kt)("p",null,"For the project metadata, use:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Group: ",(0,o.kt)("inlineCode",{parentName:"li"},"com.graphqljava.tutorial")),(0,o.kt)("li",{parentName:"ul"},"Artifact: ",(0,o.kt)("inlineCode",{parentName:"li"},"bookDetails"))),(0,o.kt)("p",null,"For dependencies, select:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Spring Web, and"),(0,o.kt)("li",{parentName:"ul"},"Spring for GraphQL")),(0,o.kt)("p",null,"Then click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Generate")," for a ready to use Spring Boot app.\nAll subsequently mentioned files and paths will be relative to this generated project."),(0,o.kt)("p",null,"Spring for GraphQL adds many useful features including loading schema files, initializing GraphQL Java, and simplifying data fetching with controller annotations."),(0,o.kt)("h2",{id:"schema"},"Schema"),(0,o.kt)("p",null,"Add a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"schema.graphqls")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/main/resources/graphql")," with the following content:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  bookById(id: ID): Book\n}\n\ntype Book {\n  id: ID\n  name: String\n  pageCount: Int\n  author: Author\n}\n\ntype Author {\n  id: ID\n  firstName: String\n  lastName: String\n}\n")),(0,o.kt)("p",null,"This schema defines one top level field (in the type ",(0,o.kt)("inlineCode",{parentName:"p"},"Query"),"): ",(0,o.kt)("inlineCode",{parentName:"p"},"bookById")," which returns the details of a specific book."),(0,o.kt)("p",null,"It also defines the type ",(0,o.kt)("inlineCode",{parentName:"p"},"Book")," which has the fields: ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pageCount")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"author"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"author")," is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Author"),", which is defined after ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The Domain Specific Language (shown above) used to describe a schema is called the Schema Definition Language or SDL. More details about it can be found ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/"},"here"),".")),(0,o.kt)("h2",{id:"source-of-the-data"},"Source of the data"),(0,o.kt)("p",null,"To simplify the tutorial, book and author data will come from static lists inside their respective classes.\nIt is very important to understand that GraphQL doesn't dictate in any way where the data comes from.\nThis is the power of GraphQL: it can come from a static in-memory list, from a database or an external service."),(0,o.kt)("h3",{id:"create-the-book-class"},"Create the Book class"),(0,o.kt)("p",null,"Add the following to ",(0,o.kt)("inlineCode",{parentName:"p"},"bookDetails/Book.java")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.graphqljava.tutorial.bookDetails;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nrecord Book(String id, String name, int pageCount, String authorId) {\n\n    private static List<Book> books = Arrays.asList(\n        new Book("book-1", "Harry Potter and the Philosopher\'s Stone", 223, "author-1"),\n        new Book("book-2", "Moby Dick", 635, "author-2"),\n        new Book("book-3", "Interview with the vampire", 371, "author-3")\n    );\n\n    public static Book getById(String id) {\n        return books.stream().filter(book -> book.id().equals(id)).findFirst().orElse(null);\n    }\n\n}\n')),(0,o.kt)("h3",{id:"create-the-author-class"},"Create the Author class"),(0,o.kt)("p",null,"Add the following to ",(0,o.kt)("inlineCode",{parentName:"p"},"bookDetails/Author.java")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.graphqljava.tutorial.bookDetails;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nrecord Author(String id, String firstName, String lastName) {\n\n    private static List<Author> authors = Arrays.asList(\n        new Author("author-1", "Joanne", "Rowling"),\n        new Author("author-2", "Herman", "Melville"),\n        new Author("author-3", "Anne", "Rice")\n    );\n\n    public static Author getById(String id) {\n        return authors.stream().filter(author -> author.id().equals(id)).findFirst().orElse(null);\n    }\n\n}\n')),(0,o.kt)("h2",{id:"adding-code-to-fetch-data"},"Adding code to fetch data"),(0,o.kt)("p",null,"Spring for GraphQL provides an ",(0,o.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-graphql/reference/controllers.html"},"annotation-based programming model")," to declare handler methods to fetch the data for specific GraphQL fields."),(0,o.kt)("p",null,"Add the following to ",(0,o.kt)("inlineCode",{parentName:"p"},"bookDetails/BookController.java")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"package com.graphqljava.tutorial.bookDetails;\n\nimport org.springframework.graphql.data.method.annotation.Argument;\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.graphql.data.method.annotation.SchemaMapping;\nimport org.springframework.stereotype.Controller;\n\n@Controller\nclass BookController {\n\n    @QueryMapping\n    public Book bookById(@Argument String id) {\n        return Book.getById(id);\n    }\n\n    @SchemaMapping\n    public Author author(Book book) {\n        return Author.getById(book.authorId());\n    }\n\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@QueryMapping")," annotation binds this method to a query, a field under the Query type.\nThe query field is then determined from the method name, ",(0,o.kt)("inlineCode",{parentName:"p"},"bookById"),". It could also be declared on the annotation.\nSpring for GraphQL uses ",(0,o.kt)("inlineCode",{parentName:"p"},"RuntimeWiring.Builder")," to register the handler method as a ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql.schema.DataFetcher")," for the query field ",(0,o.kt)("inlineCode",{parentName:"p"},"bookById"),"."),(0,o.kt)("p",null,"In GraphQL Java, ",(0,o.kt)("inlineCode",{parentName:"p"},"DataFetchingEnvironment")," provides access to a map of field-specific argument values.\nUse the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Argument")," annotation to have an argument bound to a target object and injected into the handler method.\nBy default, the method parameter name is used to look up the argument.\nThe argument name can be specified in the annotation."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@SchemaMapping")," annotation maps a handler method to a field in the GraphQL schema and declares it to be the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataFetcher")," for that field.\nThe field name defaults to the method name, and the type name defaults to the simple class name of the source/parent object injected into the method. In this example, the field defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"author")," and the type defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),".\nThe type and field can be specified in the annotation."),(0,o.kt)("p",null,"For more, see the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-graphql/reference/controllers.html"},"documentation for the Spring for GraphQL annotated controller feature"),"."),(0,o.kt)("p",null,"That's all the code we need! Let's run our first query."),(0,o.kt)("h2",{id:"running-our-first-query"},"Running our first query"),(0,o.kt)("h3",{id:"enable-the-graphiql-playground"},"Enable the GraphiQL Playground"),(0,o.kt)("p",null,"GraphiQL is a useful visual interface for writing and executing queries, and much more. Enable GraphiQL by adding this config to the ",(0,o.kt)("inlineCode",{parentName:"p"},"application.properties")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"spring.graphql.graphiql.enabled=true\n")),(0,o.kt)("p",null,"This will enable GraphiQL at the path ",(0,o.kt)("inlineCode",{parentName:"p"},"/graphiql")," by default. You can change this path by configuring ",(0,o.kt)("inlineCode",{parentName:"p"},"spring.graphql.graphiql.path"),"."),(0,o.kt)("h3",{id:"boot-the-application"},"Boot the application"),(0,o.kt)("p",null,"Start your Spring application. "),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8080/graphiql"},"http://localhost:8080/graphiql")," or your custom URL."),(0,o.kt)("h3",{id:"run-the-query"},"Run the query"),(0,o.kt)("p",null,"Type in the query and hit the play button at the top of the window."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'query bookDetails {\n  bookById(id: "book-1") {\n    id\n    name\n    pageCount\n    author {\n      id\n      firstName\n      lastName\n    }\n  }\n}\n')),(0,o.kt)("p",null,"You should see a response like this.\n",(0,o.kt)("img",{alt:"GraphQL response",src:a(7959).Z})),(0,o.kt)("p",null,"We have built a GraphQL server and run our first query!\nWith the help of Spring for GraphQL features, we were able to achieve this with only a few lines of code."),(0,o.kt)("h2",{id:"further-reading"},"Further reading"),(0,o.kt)("h3",{id:"book"},"Book"),(0,o.kt)("p",null,"If you want to learn more, we (the maintainers) have written a book! ",(0,o.kt)("a",{parentName:"p",href:"https://leanpub.com/graphql-java"},(0,o.kt)("strong",{parentName:"a"},"GraphQL with Java and Spring"))," includes everything you need to know to build a production ready GraphQL service with Spring for GraphQL and GraphQL Java. "),(0,o.kt)("p",null,"Learn first-hand from the founder of GraphQL Java and co-author of Spring for GraphQL. The book is suitable for beginners and also includes advanced topics for intermediate readers. The book is available on ",(0,o.kt)("a",{parentName:"p",href:"https://leanpub.com/graphql-java"},"Leanpub")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.amazon.com/GraphQL-Java-Spring-Andreas-Marek-ebook/dp/B0C96ZYWPF/"},"Amazon"),"."),(0,o.kt)("h3",{id:"sample-source-code"},"Sample source code"),(0,o.kt)("p",null,"The source code for this tutorial can be found on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql-java/tutorials"},"GitHub"),"."),(0,o.kt)("h3",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,"Read the GraphQL Java ",(0,o.kt)("a",{parentName:"p",href:"https://www.graphql-java.com/documentation/getting-started"},"documentation"),"."),(0,o.kt)("h3",{id:"more-spring-for-graphql-examples"},"More Spring for GraphQL examples"),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-graphql/reference/samples.html"},"Spring for GraphQL documentation for more samples"),"."),(0,o.kt)("h3",{id:"tutorials-written-by-the-community"},"Tutorials written by the community"),(0,o.kt)("p",null,"If you'd like to see a longer tutorial with pure GraphQL Java and without any framework such as Spring, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bhabegger"},"Benjamin Habegger")," has written a detailed ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@benjamin.habegger/step-by-step-guide-to-build-a-graphql-server-in-java-over-multiple-data-sources-30c0c7b4b409"},"tutorial"),"."),(0,o.kt)("p",null,"We welcome tutorials written by the community. If you'd like to see a tutorial here, please post on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/discussions"},"GitHub Discussions"),"."),(0,o.kt)("h3",{id:"github-discussions"},"GitHub Discussions"),(0,o.kt)("p",null,"We also use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/graphql-java/graphql-java/discussions"},"GitHub Discussions")," for any questions or problems."))}d.isMDXComponent=!0},7959:function(e,t,a){t.Z=a.p+"assets/images/graphiQL-aa411218bffc617ecbe695f3e1bb138e.png"}}]);