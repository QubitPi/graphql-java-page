"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6513],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,u=d["".concat(s,".").concat(g)]||d[g]||h[g]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2337:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(8168),i=n(8587),r=(n(6540),n(5680)),o=["components"],l={title:"Data fetching",date:new Date("2018-09-09T02:52:46.000Z"),description:"How graphql-java fetches data for each of the fields in a query"},s="Fetching data",c={unversionedId:"data-fetching",id:"version-v24/data-fetching",isDocsHomePage:!1,title:"Data fetching",description:"How graphql-java fetches data for each of the fields in a query",source:"@site/versioned_docs/version-v24/data-fetching.md",sourceDirName:".",slug:"/data-fetching",permalink:"/documentation/data-fetching",editUrl:"https://github.com/graphql-java/graphql-java-page/edit/master/versioned_docs/version-v24/data-fetching.md",tags:[],version:"v24",frontMatter:{title:"Data fetching",date:"2018-09-09T02:52:46.000Z",description:"How graphql-java fetches data for each of the fields in a query"},sidebar:"version-v24/tutorialSidebar",previous:{title:"Contributions",permalink:"/documentation/contributions"},next:{title:"Data mapping",permalink:"/documentation/data-mapping"}},p=[{value:"How graphql fetches data",id:"how-graphql-fetches-data",children:[],level:2},{value:"Customising PropertyDataFetcher",id:"customising-propertydatafetcher",children:[],level:2},{value:"The interesting parts of the DataFetchingEnvironment",id:"the-interesting-parts-of-the-datafetchingenvironment",children:[],level:2},{value:"The interesting parts of ExecutionStepInfo",id:"the-interesting-parts-of-executionstepinfo",children:[],level:2},{value:"The interesting parts of DataFetchingFieldSelectionSet",id:"the-interesting-parts-of-datafetchingfieldselectionset",children:[],level:2}],h={toc:p};function d(e){var t=e.components,n=(0,i.A)(e,o);return(0,r.yg)("wrapper",(0,a.A)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"fetching-data"},"Fetching data"),(0,r.yg)("h2",{id:"how-graphql-fetches-data"},"How graphql fetches data"),(0,r.yg)("p",null,"Each field in graphql has a ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.DataFetcher")," associated with it."),(0,r.yg)("p",null,"Some fields will use specialised data fetcher code that knows how to go to a database say to get field information while\nmost simply take data from the returned in memory objects using the field name and Plain Old Java Object (POJO) patterns\nto get the data."),(0,r.yg)("p",null,'Note : Data fetchers are some times called "resolvers" in other graphql implementations.'),(0,r.yg)("p",null,"So imagine a type declaration like the one below :"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  products(match : String) : [Product]   # a list of products\n}\n\ntype Product {\n  id : ID\n  name : String\n  description : String\n  cost : Float\n  tax : Float\n  launchDate(dateFormat : String = \"dd, MMM, yyyy') : String\n}\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Query.products")," field has a data fetcher, as does each field in the type ",(0,r.yg)("inlineCode",{parentName:"p"},"Product"),"."),(0,r.yg)("p",null,"The data fetcher on the ",(0,r.yg)("inlineCode",{parentName:"p"},"Query.products")," field is likely to be a more complex data fetcher, containing code that\ngoes to a database say to get a list of ",(0,r.yg)("inlineCode",{parentName:"p"},"Product")," objects.  It takes an optional ",(0,r.yg)("inlineCode",{parentName:"p"},"match")," argument and hence can filter these\nproduct results if the client specified it."),(0,r.yg)("p",null,"It might look like the following :"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'DataFetcher productsDataFetcher = new DataFetcher<List<ProductDTO>>() {\n    @Override\n    public List<ProductDTO> get(DataFetchingEnvironment environment) {\n        DatabaseSecurityCtx ctx = environment.getGraphQlContext().get("databaseSecurityCtx");\n\n        List<ProductDTO> products;\n        String match = environment.getArgument("match");\n        if (match != null) {\n            products = fetchProductsFromDatabaseWithMatching(ctx, match);\n        } else {\n            products = fetchAllProductsFromDatabase(ctx);\n        }\n        return products;\n    }\n};\n')),(0,r.yg)("p",null,"Each ",(0,r.yg)("inlineCode",{parentName:"p"},"DataFetcher")," is passed a ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.DataFetchingEnvironment")," object which contains what field is being fetched, what\narguments have been supplied to the field and other information such as the field's type, its parent type, the query root object or the query\ncontext object."),(0,r.yg)("p",null,"Note how the data fetcher code above uses the context object as an application specific security handle to get access\nto the database.  This is a common technique to provide lower layer calling context."),(0,r.yg)("p",null,"Once we have a list of ",(0,r.yg)("inlineCode",{parentName:"p"},"ProductDTO")," objects we typically don't need specialised data fetchers on each field.  graphql-java\nships with a smart ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.PropertyDataFetcher")," that knows how to follow POJO patterns based\non the field name.  In the example above there is a ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," field and hence it will try to look for a ",(0,r.yg)("inlineCode",{parentName:"p"},"public String getName()"),"\nPOJO method to get the data."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.PropertyDataFetcher")," is the data fetcher that is automatically associated with each field by default."),(0,r.yg)("p",null,"You can however still get access to the ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.DataFetchingEnvironment")," in your DTO methods.  This allows you to\ntweak values before sending them out.  For example above we have a ",(0,r.yg)("inlineCode",{parentName:"p"},"launchDate")," field that takes an optional ",(0,r.yg)("inlineCode",{parentName:"p"},"dateFormat"),"\nargument.  We can have the ProductDTO have logic that applies this date formatting to the desired format."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'class ProductDTO {\n\n    private ID id;\n    private String name;\n    private String description;\n    private Double cost;\n    private Double tax;\n    private LocalDateTime launchDate;\n\n    // ...\n\n    public String getName() {\n        return name;\n    }\n\n    // ...\n\n    public String getLaunchDate(DataFetchingEnvironment environment) {\n        String dateFormat = environment.getArgument("dateFormat");\n        return yodaTimeFormatter(launchDate,dateFormat);\n    }\n}\n')),(0,r.yg)("h2",{id:"customising-propertydatafetcher"},"Customising PropertyDataFetcher"),(0,r.yg)("p",null,"As mentioned above ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.PropertyDataFetcher")," is the default data fetcher for fields in graphql-java and it will use standard patterns for fetching\nobject field values."),(0,r.yg)("p",null,"It supports a ",(0,r.yg)("inlineCode",{parentName:"p"},"POJO")," approach and a ",(0,r.yg)("inlineCode",{parentName:"p"},"Map")," approach in a Java idiomatic way.  By default it assumes that for a graphql field ",(0,r.yg)("inlineCode",{parentName:"p"},"fieldX")," it can find a POJO property\ncalled ",(0,r.yg)("inlineCode",{parentName:"p"},"fieldX")," or a map key called ",(0,r.yg)("inlineCode",{parentName:"p"},"fieldX")," if the backing object is a ",(0,r.yg)("inlineCode",{parentName:"p"},"Map"),"."),(0,r.yg)("p",null,"However you may have small differences between your graphql schema naming and runtime object naming.  For example imagine that ",(0,r.yg)("inlineCode",{parentName:"p"},"Product.description")," is actually\nrepresented as ",(0,r.yg)("inlineCode",{parentName:"p"},"getDesc()")," in the runtime backing Java object."),(0,r.yg)("p",null,"You can specify it directly by wiring in a field data fetcher.\nThis will tell the ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.PropertyDataFetcher")," to use the property name ",(0,r.yg)("inlineCode",{parentName:"p"},"desc")," when fetching data for the graphql field named ",(0,r.yg)("inlineCode",{parentName:"p"},"description"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'GraphQLFieldDefinition descriptionField = GraphQLFieldDefinition.newFieldDefinition()\n        .name("description")\n        .type(Scalars.GraphQLString)\n        .build();\n\nGraphQLCodeRegistry codeRegistry = GraphQLCodeRegistry.newCodeRegistry()\n        .dataFetcher(\n                coordinates("ObjectType", "description"),\n                PropertyDataFetcher.fetching("desc"))\n        .build();\n')),(0,r.yg)("h2",{id:"the-interesting-parts-of-the-datafetchingenvironment"},"The interesting parts of the DataFetchingEnvironment"),(0,r.yg)("p",null,"Every data fetcher is passed a ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.schema.DataFetchingEnvironment")," object which allows it to know more about what is being fetched\nand what arguments have been provided.  Here are some of the more interesting parts of ",(0,r.yg)("inlineCode",{parentName:"p"},"DataFetchingEnvironment"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"<T> T getSource()")," - the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," object is used to get information for a field.  Its the object that is the result\nof the parent field fetch.  In the common case it is an in memory DTO object and hence simple POJO getters will be used for fields values.  In more complex cases, you may examine it to know\nhow to get the specific information for the current field.  As the graphql field tree is executed, each returned field value\nbecomes the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," object for child fields.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"<T> T getRoot()")," - this special object is used to seed the graphql query.  The ",(0,r.yg)("inlineCode",{parentName:"p"},"root")," and the ",(0,r.yg)("inlineCode",{parentName:"p"},"source")," is the same thing for the\ntop level fields.  The root object never changes during the query and it may be null and hence no used.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"Map<String, Object> getArguments()")," - this represents the arguments that have been provided on a field and the values of those\narguments that have been resolved from passed in variables, AST literals and default argument values.  You use the arguments\nof a field to control what values it returns.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"<T> T getGraphQLContext()")," - the context object is set up when the query is first executed and stays the same over the lifetime\nof the query.  The context is a map that can contain any value and is typically used to give each data fetcher some calling context needed\nwhen trying to get field data.  For example the current user credentials or the database connection parameters could be contained\nwith a context object so that data fetchers can make business layer calls.  One of the key design decisions you have as a graphql\nsystem designer is how you will use context in your fetchers if at all.  Some people use a dependency framework that injects context into\ndata fetchers automatically and hence don't need to use this.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"ExecutionStepInfo getExecutionStepInfo()")," - the field type information is a catch all bucket of field type information that is built up as\nthe query is executed.  The following section explains more on this.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"DataFetchingFieldSelectionSet getSelectionSet()"),' - the selection set represents the child fields that have been "selected" under neath the\ncurrently executing field. This can be useful to help look ahead to see what sub field information a client wants.  The following section explains more on this.')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"ExecutionId getExecutionId()")," - each query execution is given a unique id.  You can use this perhaps on logs to tag each individual\nquery."))),(0,r.yg)("h2",{id:"the-interesting-parts-of-executionstepinfo"},"The interesting parts of ExecutionStepInfo"),(0,r.yg)("p",null,"The execution of a graphql query creates a call tree of fields and their types.  ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.execution.ExecutionStepInfo.getParentTypeInfo"),"\nallows you to navigate upwards and see what types and fields led to the current field execution."),(0,r.yg)("p",null,"Since this forms a tree path during execution, the ",(0,r.yg)("inlineCode",{parentName:"p"},"graphql.execution.ExecutionStepInfo.getPath")," method returns the representation of that\npath.  This can be useful for logging and debugging queries."),(0,r.yg)("p",null,"There are also helper methods there to help you get the underlying type name of non null and list wrapped types."),(0,r.yg)("h2",{id:"the-interesting-parts-of-datafetchingfieldselectionset"},"The interesting parts of DataFetchingFieldSelectionSet"),(0,r.yg)("p",null,"Imagine a query such as the following"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"query {\n  products {\n    # the fields below represent the selection set\n    name\n    description\n    sellingLocations {\n        state\n    }\n  }\n}\n")),(0,r.yg)("p",null,"The sub fields here of the ",(0,r.yg)("inlineCode",{parentName:"p"},"products")," field represent the selection set of that field.  It can be useful to know what sub selection has been asked for\nso the data fetcher can optimise the data access queries.  For example an SQL backed system may be able to use the field sub selection to\nonly retrieve the columns that have been asked for."),(0,r.yg)("p",null,"In the example above we have asked for ",(0,r.yg)("inlineCode",{parentName:"p"},"sellingLocations")," information and hence we may be able to make an more efficient data access query where\nwe ask for product information and selling location information at the same time."))}d.isMDXComponent=!0}}]);